# ベースイメージとしてNode.js 18を使用
FROM node:18

# Vimをインストールするためにapt-getを更新してインストール
RUN apt-get update && \
    apt-get install -y vim

# 作業ディレクトリを作成
WORKDIR /app

# package.jsonとpackage-lock.jsonをコピー
COPY package*.json ./

# 依存関係をインストール
RUN npm install

# 残りのアプリケーションコードをコピー
# コンテナ内のpackage.jsonが、ローカルのpackage.jsonに上書きされないようにするために、npm install xxxx 系のコマンドより先に記載する。（マウントしていたら意味無い）
COPY . .

############## ローカルとコンテナのマウントについて ##################
# ローカルファイルがマウントされるタイミングは、コンテナが立ち上がった直後（Dockerfileでインストールした直後）にローカルがコンテナ内のファイルを上書きする。
# コンテナが立ち上がってマウントが完了した後の場合、コンテナ内のファイルを更新したらローカルのファイルも更新される。

#（マウントしている）且つ（Dockerfile内でファイルを更新)　＝　ローカル内（ローカルファイル勝ち） コンテナが立ち上がった後のコンテナ内（ローカルファイル勝ち）
#（マウントしていない）且つ（Dockerfile内でファイルを更新）＝　ローカル内（ローカルファイル勝ち） コンテナが立ち上がった後のコンテナ内（コンテナ内ファイル勝ち）

# ローカルのpackage.json（というか全部のローカルファイル）は、マウントされていようがマウントされてないくてもDockerfile内（コンテナ立ち上げ時コンテナ内）で更新しても、ローカルは変わらない。
# コンテナが立ち上がった後に、ローカルファイルが優先してマウントされるから、Dockerfileで更新されても、ローカルファイルは更新されない。コンテナ内で新規に出力されたファイルはローカルにも反映されるようにみえる。
################################################################

# TypeScriptをビルド
#RUN npm run build

CMD ["npm", "run", "dev"]

# コンテナを維持するための無限ループ
#CMD ["tail", "-f", "/dev/null"]
